// vite.config.ts
import { loadEnv } from "file:///D:/project/vue3-boot/node_modules/vite/dist/node/index.js";

// build/vite/plugin/index.ts
import vue from "file:///D:/project/vue3-boot/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import vueSetupExtend from "file:///D:/project/vue3-boot/node_modules/vite-plugin-vue-setup-extend/dist/index.mjs";

// build/vite/plugin/html.ts
import { createHtmlPlugin } from "file:///D:/project/vue3-boot/node_modules/vite-plugin-html/dist/index.mjs";
function configHtmlPlugin(env) {
  const htmlPlugin = createHtmlPlugin({
    inject: {
      data: {
        title: env.VITE_APP_TITLE
      }
    }
  });
  return htmlPlugin;
}

// build/vite/plugin/autoImport.ts
import AutoImport from "file:///D:/project/vue3-boot/node_modules/unplugin-auto-import/dist/vite.js";
function configAutoImportPlugin() {
  const autoImportPlugin = AutoImport({
    imports: ["vue", "vue-router", "pinia"],
    dts: "./types/auto-imports.d.ts",
    eslintrc: {
      enabled: true,
      filepath: "./.eslintrc-auto-import.json"
    }
  });
  return autoImportPlugin;
}

// build/vite/plugin/svgSprite.ts
import { createSvgIconsPlugin } from "file:///D:/project/vue3-boot/node_modules/vite-plugin-svg-icons/dist/index.mjs";

// build/constant.ts
var ENVS_BY_CLIENT = [];

// build/utils.ts
import { resolve } from "path";
function wrapEnv(env) {
  const CLIENT = process.env.CLIENT;
  if (!CLIENT) {
    return env;
  }
  env.CLIENT = CLIENT;
  ENVS_BY_CLIENT.forEach((item) => {
    if (Reflect.has(env, item)) {
      const envMap = JSON.parse(env[item]);
      if (envMap) {
        env[item] = envMap[CLIENT];
      }
    }
  });
  return env;
}
function pathResolve(dir) {
  return resolve(process.cwd(), dir);
}

// build/vite/plugin/svgSprite.ts
function configSvgIconsPlugin() {
  const svgIconsPlugin = createSvgIconsPlugin({
    iconDirs: [pathResolve("src/assets/icons")],
    svgoOptions: process.env.NODE_ENV === "production",
    symbolId: "[dir]-[name]"
  });
  return svgIconsPlugin;
}

// build/vite/plugin/index.ts
function createVitePlugins(env) {
  const vitePlugins = [
    // have to
    vue(),
    vueSetupExtend()
  ];
  vitePlugins.push(configHtmlPlugin(env));
  vitePlugins.push(configAutoImportPlugin());
  vitePlugins.push(configSvgIconsPlugin());
  return vitePlugins;
}

// vite.config.ts
var vite_config_default = ({ mode }) => {
  const root = process.cwd();
  const env = loadEnv(mode, root);
  const viteEnv = wrapEnv(env);
  return {
    base: viteEnv.VITE_PUBLIC_PATH,
    resolve: {
      alias: [
        // /@/xxxx => /src/xxxx
        {
          find: /\/@\//,
          replacement: pathResolve("src") + "/"
        },
        // /#/xxxx => /types/xxxx
        {
          find: /\/#\//,
          replacement: pathResolve("types") + "/"
        }
      ]
    },
    plugins: createVitePlugins(viteEnv),
    server: {
      host: true,
      proxy: {
        "/api": {
          target: viteEnv.VITE_DEV_SERVER_PROXY,
          changeOrigin: true,
          rewrite: (path) => path.replace(/^\/api/, "")
        }
      }
    },
    define: {
      "process.env.VITE_ENV": viteEnv
    },
    css: {
      preprocessorOptions: {
        less: {
          javascriptEnabled: true
        }
      }
    },
    build: {
      // outDir: 'dist' + viteEnv.VITE_PUBLIC_PATH,
      sourcemap: mode === "development"
    }
  };
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAiYnVpbGQvdml0ZS9wbHVnaW4vaW5kZXgudHMiLCAiYnVpbGQvdml0ZS9wbHVnaW4vaHRtbC50cyIsICJidWlsZC92aXRlL3BsdWdpbi9hdXRvSW1wb3J0LnRzIiwgImJ1aWxkL3ZpdGUvcGx1Z2luL3N2Z1Nwcml0ZS50cyIsICJidWlsZC9jb25zdGFudC50cyIsICJidWlsZC91dGlscy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkQ6XFxcXHByb2plY3RcXFxcdnVlMy1ib290XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJEOlxcXFxwcm9qZWN0XFxcXHZ1ZTMtYm9vdFxcXFx2aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vRDovcHJvamVjdC92dWUzLWJvb3Qvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgdHlwZSB7IFVzZXJDb25maWcsIENvbmZpZ0VudiB9IGZyb20gJ3ZpdGUnO1xyXG5pbXBvcnQgeyBsb2FkRW52IH0gZnJvbSAndml0ZSc7XHJcbmltcG9ydCB7IGNyZWF0ZVZpdGVQbHVnaW5zIH0gZnJvbSAnLi9idWlsZC92aXRlL3BsdWdpbic7XHJcbmltcG9ydCB7IHdyYXBFbnYsIHBhdGhSZXNvbHZlIH0gZnJvbSAnLi9idWlsZC91dGlscyc7XHJcblxyXG4vLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xyXG5leHBvcnQgZGVmYXVsdCAoeyBtb2RlIH06IENvbmZpZ0Vudik6IFVzZXJDb25maWcgPT4ge1xyXG4gIGNvbnN0IHJvb3QgPSBwcm9jZXNzLmN3ZCgpO1xyXG4gIGNvbnN0IGVudiA9IGxvYWRFbnYobW9kZSwgcm9vdCk7XHJcblxyXG4gIGNvbnN0IHZpdGVFbnYgPSB3cmFwRW52KGVudik7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBiYXNlOiB2aXRlRW52LlZJVEVfUFVCTElDX1BBVEgsXHJcbiAgICByZXNvbHZlOiB7XHJcbiAgICAgIGFsaWFzOiBbXHJcbiAgICAgICAgLy8gL0AveHh4eCA9PiAvc3JjL3h4eHhcclxuICAgICAgICB7XHJcbiAgICAgICAgICBmaW5kOiAvXFwvQFxcLy8sXHJcbiAgICAgICAgICByZXBsYWNlbWVudDogcGF0aFJlc29sdmUoJ3NyYycpICsgJy8nXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvLyAvIy94eHh4ID0+IC90eXBlcy94eHh4XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZmluZDogL1xcLyNcXC8vLFxyXG4gICAgICAgICAgcmVwbGFjZW1lbnQ6IHBhdGhSZXNvbHZlKCd0eXBlcycpICsgJy8nXHJcbiAgICAgICAgfVxyXG4gICAgICBdXHJcbiAgICB9LFxyXG4gICAgcGx1Z2luczogY3JlYXRlVml0ZVBsdWdpbnModml0ZUVudiksXHJcbiAgICBzZXJ2ZXI6IHtcclxuICAgICAgaG9zdDogdHJ1ZSxcclxuICAgICAgcHJveHk6IHtcclxuICAgICAgICAnL2FwaSc6IHtcclxuICAgICAgICAgIHRhcmdldDogdml0ZUVudi5WSVRFX0RFVl9TRVJWRVJfUFJPWFksXHJcbiAgICAgICAgICBjaGFuZ2VPcmlnaW46IHRydWUsXHJcbiAgICAgICAgICByZXdyaXRlOiAocGF0aCkgPT4gcGF0aC5yZXBsYWNlKC9eXFwvYXBpLywgJycpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZGVmaW5lOiB7XHJcbiAgICAgICdwcm9jZXNzLmVudi5WSVRFX0VOVic6IHZpdGVFbnZcclxuICAgIH0sXHJcbiAgICBjc3M6IHtcclxuICAgICAgcHJlcHJvY2Vzc29yT3B0aW9uczoge1xyXG4gICAgICAgIGxlc3M6IHtcclxuICAgICAgICAgIGphdmFzY3JpcHRFbmFibGVkOiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgYnVpbGQ6IHtcclxuICAgICAgLy8gb3V0RGlyOiAnZGlzdCcgKyB2aXRlRW52LlZJVEVfUFVCTElDX1BBVEgsXHJcbiAgICAgIHNvdXJjZW1hcDogbW9kZSA9PT0gJ2RldmVsb3BtZW50J1xyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRDpcXFxccHJvamVjdFxcXFx2dWUzLWJvb3RcXFxcYnVpbGRcXFxcdml0ZVxcXFxwbHVnaW5cIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkQ6XFxcXHByb2plY3RcXFxcdnVlMy1ib290XFxcXGJ1aWxkXFxcXHZpdGVcXFxccGx1Z2luXFxcXGluZGV4LnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9EOi9wcm9qZWN0L3Z1ZTMtYm9vdC9idWlsZC92aXRlL3BsdWdpbi9pbmRleC50c1wiO2ltcG9ydCB0eXBlIHsgUGx1Z2luLCBQbHVnaW5PcHRpb24gfSBmcm9tICd2aXRlJztcclxuXHJcbmltcG9ydCB2dWUgZnJvbSAnQHZpdGVqcy9wbHVnaW4tdnVlJztcclxuaW1wb3J0IHZ1ZVNldHVwRXh0ZW5kIGZyb20gJ3ZpdGUtcGx1Z2luLXZ1ZS1zZXR1cC1leHRlbmQnO1xyXG5pbXBvcnQgeyBjb25maWdIdG1sUGx1Z2luIH0gZnJvbSAnLi9odG1sJztcclxuaW1wb3J0IHsgY29uZmlnQXV0b0ltcG9ydFBsdWdpbiB9IGZyb20gJy4vYXV0b0ltcG9ydCc7XHJcbmltcG9ydCB7IGNvbmZpZ1N2Z0ljb25zUGx1Z2luIH0gZnJvbSAnLi9zdmdTcHJpdGUnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVZpdGVQbHVnaW5zKGVudjogVml0ZUVudikge1xyXG4gIGNvbnN0IHZpdGVQbHVnaW5zOiAoUGx1Z2luIHwgUGx1Z2luW10gfCBQbHVnaW5PcHRpb24gfCBQbHVnaW5PcHRpb25bXSlbXSA9IFtcclxuICAgIC8vIGhhdmUgdG9cclxuICAgIHZ1ZSgpLFxyXG4gICAgdnVlU2V0dXBFeHRlbmQoKVxyXG4gIF07XHJcblxyXG4gIHZpdGVQbHVnaW5zLnB1c2goY29uZmlnSHRtbFBsdWdpbihlbnYpKTtcclxuICB2aXRlUGx1Z2lucy5wdXNoKGNvbmZpZ0F1dG9JbXBvcnRQbHVnaW4oKSk7XHJcbiAgdml0ZVBsdWdpbnMucHVzaChjb25maWdTdmdJY29uc1BsdWdpbigpKTtcclxuXHJcbiAgcmV0dXJuIHZpdGVQbHVnaW5zO1xyXG59XHJcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRDpcXFxccHJvamVjdFxcXFx2dWUzLWJvb3RcXFxcYnVpbGRcXFxcdml0ZVxcXFxwbHVnaW5cIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkQ6XFxcXHByb2plY3RcXFxcdnVlMy1ib290XFxcXGJ1aWxkXFxcXHZpdGVcXFxccGx1Z2luXFxcXGh0bWwudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0Q6L3Byb2plY3QvdnVlMy1ib290L2J1aWxkL3ZpdGUvcGx1Z2luL2h0bWwudHNcIjtpbXBvcnQgdHlwZSB7IFBsdWdpbk9wdGlvbiB9IGZyb20gJ3ZpdGUnO1xyXG5cclxuaW1wb3J0IHsgY3JlYXRlSHRtbFBsdWdpbiB9IGZyb20gJ3ZpdGUtcGx1Z2luLWh0bWwnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ0h0bWxQbHVnaW4oZW52OiBWaXRlRW52KSB7XHJcbiAgY29uc3QgaHRtbFBsdWdpbjogUGx1Z2luT3B0aW9uW10gPSBjcmVhdGVIdG1sUGx1Z2luKHtcclxuICAgIGluamVjdDoge1xyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgdGl0bGU6IGVudi5WSVRFX0FQUF9USVRMRVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBodG1sUGx1Z2luO1xyXG59XHJcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRDpcXFxccHJvamVjdFxcXFx2dWUzLWJvb3RcXFxcYnVpbGRcXFxcdml0ZVxcXFxwbHVnaW5cIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkQ6XFxcXHByb2plY3RcXFxcdnVlMy1ib290XFxcXGJ1aWxkXFxcXHZpdGVcXFxccGx1Z2luXFxcXGF1dG9JbXBvcnQudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0Q6L3Byb2plY3QvdnVlMy1ib290L2J1aWxkL3ZpdGUvcGx1Z2luL2F1dG9JbXBvcnQudHNcIjtpbXBvcnQgdHlwZSB7IFBsdWdpbiB9IGZyb20gJ3ZpdGUnO1xyXG5cclxuaW1wb3J0IEF1dG9JbXBvcnQgZnJvbSAndW5wbHVnaW4tYXV0by1pbXBvcnQvdml0ZSc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29uZmlnQXV0b0ltcG9ydFBsdWdpbigpIHtcclxuICBjb25zdCBhdXRvSW1wb3J0UGx1Z2luOiBQbHVnaW4gPSBBdXRvSW1wb3J0KHtcclxuICAgIGltcG9ydHM6IFsndnVlJywgJ3Z1ZS1yb3V0ZXInLCAncGluaWEnXSxcclxuICAgIGR0czogJy4vdHlwZXMvYXV0by1pbXBvcnRzLmQudHMnLFxyXG4gICAgZXNsaW50cmM6IHtcclxuICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgZmlsZXBhdGg6ICcuLy5lc2xpbnRyYy1hdXRvLWltcG9ydC5qc29uJ1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gYXV0b0ltcG9ydFBsdWdpbjtcclxufVxyXG4iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkQ6XFxcXHByb2plY3RcXFxcdnVlMy1ib290XFxcXGJ1aWxkXFxcXHZpdGVcXFxccGx1Z2luXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJEOlxcXFxwcm9qZWN0XFxcXHZ1ZTMtYm9vdFxcXFxidWlsZFxcXFx2aXRlXFxcXHBsdWdpblxcXFxzdmdTcHJpdGUudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0Q6L3Byb2plY3QvdnVlMy1ib290L2J1aWxkL3ZpdGUvcGx1Z2luL3N2Z1Nwcml0ZS50c1wiOy8qKlxyXG4gKiBWaXRlIFBsdWdpbiBmb3IgZmFzdCBjcmVhdGluZyBTVkcgc3ByaXRlcy5cclxuICogaHR0cHM6Ly9naXRodWIuY29tL2FubmN3Yi92aXRlLXBsdWdpbi1zdmctaWNvbnNcclxuICovXHJcbmltcG9ydCB0eXBlIHsgUGx1Z2luIH0gZnJvbSAndml0ZSc7XHJcblxyXG5pbXBvcnQgeyBjcmVhdGVTdmdJY29uc1BsdWdpbiB9IGZyb20gJ3ZpdGUtcGx1Z2luLXN2Zy1pY29ucyc7XHJcbmltcG9ydCB7IHBhdGhSZXNvbHZlIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ1N2Z0ljb25zUGx1Z2luKCkge1xyXG4gIGNvbnN0IHN2Z0ljb25zUGx1Z2luOiBQbHVnaW4gPSBjcmVhdGVTdmdJY29uc1BsdWdpbih7XHJcbiAgICBpY29uRGlyczogW3BhdGhSZXNvbHZlKCdzcmMvYXNzZXRzL2ljb25zJyldLFxyXG4gICAgc3Znb09wdGlvbnM6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicsXHJcbiAgICBzeW1ib2xJZDogJ1tkaXJdLVtuYW1lXSdcclxuICB9KTtcclxuICByZXR1cm4gc3ZnSWNvbnNQbHVnaW47XHJcbn1cclxuIiwgImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJEOlxcXFxwcm9qZWN0XFxcXHZ1ZTMtYm9vdFxcXFxidWlsZFwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiRDpcXFxccHJvamVjdFxcXFx2dWUzLWJvb3RcXFxcYnVpbGRcXFxcY29uc3RhbnQudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0Q6L3Byb2plY3QvdnVlMy1ib290L2J1aWxkL2NvbnN0YW50LnRzXCI7LyoqXHJcbiAqIFx1OTAxQVx1OEZDN0NMSUVOVFx1NUI1N1x1NkJCNVx1NTMzQVx1NTIwNlx1NzY4NFx1NzNBRlx1NTg4M1x1NTNEOFx1OTFDRlxyXG4gKiBcdTZCRDRcdTU5ODJcdUZGMUFWSVRFX0FQSV9CQVNFX1VSTFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEVOVlNfQllfQ0xJRU5UOiBzdHJpbmdbXSA9IFtdO1xyXG4iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkQ6XFxcXHByb2plY3RcXFxcdnVlMy1ib290XFxcXGJ1aWxkXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJEOlxcXFxwcm9qZWN0XFxcXHZ1ZTMtYm9vdFxcXFxidWlsZFxcXFx1dGlscy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vRDovcHJvamVjdC92dWUzLWJvb3QvYnVpbGQvdXRpbHMudHNcIjtpbXBvcnQgeyBFTlZTX0JZX0NMSUVOVCB9IGZyb20gJy4vY29uc3RhbnQnO1xyXG5pbXBvcnQgeyByZXNvbHZlIH0gZnJvbSAncGF0aCc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd3JhcEVudihlbnY6IFZpdGVFbnYpIHtcclxuICBjb25zdCBDTElFTlQgPSBwcm9jZXNzLmVudi5DTElFTlQ7XHJcbiAgaWYgKCFDTElFTlQpIHtcclxuICAgIHJldHVybiBlbnY7XHJcbiAgfVxyXG5cclxuICBlbnYuQ0xJRU5UID0gQ0xJRU5UO1xyXG5cclxuICBFTlZTX0JZX0NMSUVOVC5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICBpZiAoUmVmbGVjdC5oYXMoZW52LCBpdGVtKSkge1xyXG4gICAgICBjb25zdCBlbnZNYXAgPSBKU09OLnBhcnNlKGVudltpdGVtXSk7XHJcbiAgICAgIGlmIChlbnZNYXApIHtcclxuICAgICAgICBlbnZbaXRlbV0gPSBlbnZNYXBbQ0xJRU5UXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gZW52O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGF0aFJlc29sdmUoZGlyOiBzdHJpbmcpIHtcclxuICByZXR1cm4gcmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBkaXIpO1xyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFDQSxTQUFTLGVBQWU7OztBQ0N4QixPQUFPLFNBQVM7QUFDaEIsT0FBTyxvQkFBb0I7OztBQ0QzQixTQUFTLHdCQUF3QjtBQUUxQixTQUFTLGlCQUFpQixLQUFjO0FBQzdDLFFBQU0sYUFBNkIsaUJBQWlCO0FBQUEsSUFDbEQsUUFBUTtBQUFBLE1BQ04sTUFBTTtBQUFBLFFBQ0osT0FBTyxJQUFJO0FBQUEsTUFDYjtBQUFBLElBQ0Y7QUFBQSxFQUNGLENBQUM7QUFFRCxTQUFPO0FBQ1Q7OztBQ1pBLE9BQU8sZ0JBQWdCO0FBRWhCLFNBQVMseUJBQXlCO0FBQ3ZDLFFBQU0sbUJBQTJCLFdBQVc7QUFBQSxJQUMxQyxTQUFTLENBQUMsT0FBTyxjQUFjLE9BQU87QUFBQSxJQUN0QyxLQUFLO0FBQUEsSUFDTCxVQUFVO0FBQUEsTUFDUixTQUFTO0FBQUEsTUFDVCxVQUFVO0FBQUEsSUFDWjtBQUFBLEVBQ0YsQ0FBQztBQUVELFNBQU87QUFDVDs7O0FDVEEsU0FBUyw0QkFBNEI7OztBQ0Y5QixJQUFNLGlCQUEyQixDQUFDOzs7QUNIekMsU0FBUyxlQUFlO0FBRWpCLFNBQVMsUUFBUSxLQUFjO0FBQ3BDLFFBQU0sU0FBUyxRQUFRLElBQUk7QUFDM0IsTUFBSSxDQUFDLFFBQVE7QUFDWCxXQUFPO0FBQUEsRUFDVDtBQUVBLE1BQUksU0FBUztBQUViLGlCQUFlLFFBQVEsQ0FBQyxTQUFTO0FBQy9CLFFBQUksUUFBUSxJQUFJLEtBQUssSUFBSSxHQUFHO0FBQzFCLFlBQU0sU0FBUyxLQUFLLE1BQU0sSUFBSSxJQUFJLENBQUM7QUFDbkMsVUFBSSxRQUFRO0FBQ1YsWUFBSSxJQUFJLElBQUksT0FBTyxNQUFNO0FBQUEsTUFDM0I7QUFBQSxJQUNGO0FBQUEsRUFDRixDQUFDO0FBRUQsU0FBTztBQUNUO0FBRU8sU0FBUyxZQUFZLEtBQWE7QUFDdkMsU0FBTyxRQUFRLFFBQVEsSUFBSSxHQUFHLEdBQUc7QUFDbkM7OztBRmhCTyxTQUFTLHVCQUF1QjtBQUNyQyxRQUFNLGlCQUF5QixxQkFBcUI7QUFBQSxJQUNsRCxVQUFVLENBQUMsWUFBWSxrQkFBa0IsQ0FBQztBQUFBLElBQzFDLGFBQWEsUUFBUSxJQUFJLGFBQWE7QUFBQSxJQUN0QyxVQUFVO0FBQUEsRUFDWixDQUFDO0FBQ0QsU0FBTztBQUNUOzs7QUhSTyxTQUFTLGtCQUFrQixLQUFjO0FBQzlDLFFBQU0sY0FBcUU7QUFBQTtBQUFBLElBRXpFLElBQUk7QUFBQSxJQUNKLGVBQWU7QUFBQSxFQUNqQjtBQUVBLGNBQVksS0FBSyxpQkFBaUIsR0FBRyxDQUFDO0FBQ3RDLGNBQVksS0FBSyx1QkFBdUIsQ0FBQztBQUN6QyxjQUFZLEtBQUsscUJBQXFCLENBQUM7QUFFdkMsU0FBTztBQUNUOzs7QURkQSxJQUFPLHNCQUFRLENBQUMsRUFBRSxLQUFLLE1BQTZCO0FBQ2xELFFBQU0sT0FBTyxRQUFRLElBQUk7QUFDekIsUUFBTSxNQUFNLFFBQVEsTUFBTSxJQUFJO0FBRTlCLFFBQU0sVUFBVSxRQUFRLEdBQUc7QUFFM0IsU0FBTztBQUFBLElBQ0wsTUFBTSxRQUFRO0FBQUEsSUFDZCxTQUFTO0FBQUEsTUFDUCxPQUFPO0FBQUE7QUFBQSxRQUVMO0FBQUEsVUFDRSxNQUFNO0FBQUEsVUFDTixhQUFhLFlBQVksS0FBSyxJQUFJO0FBQUEsUUFDcEM7QUFBQTtBQUFBLFFBRUE7QUFBQSxVQUNFLE1BQU07QUFBQSxVQUNOLGFBQWEsWUFBWSxPQUFPLElBQUk7QUFBQSxRQUN0QztBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsSUFDQSxTQUFTLGtCQUFrQixPQUFPO0FBQUEsSUFDbEMsUUFBUTtBQUFBLE1BQ04sTUFBTTtBQUFBLE1BQ04sT0FBTztBQUFBLFFBQ0wsUUFBUTtBQUFBLFVBQ04sUUFBUSxRQUFRO0FBQUEsVUFDaEIsY0FBYztBQUFBLFVBQ2QsU0FBUyxDQUFDLFNBQVMsS0FBSyxRQUFRLFVBQVUsRUFBRTtBQUFBLFFBQzlDO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxJQUNBLFFBQVE7QUFBQSxNQUNOLHdCQUF3QjtBQUFBLElBQzFCO0FBQUEsSUFDQSxLQUFLO0FBQUEsTUFDSCxxQkFBcUI7QUFBQSxRQUNuQixNQUFNO0FBQUEsVUFDSixtQkFBbUI7QUFBQSxRQUNyQjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsSUFDQSxPQUFPO0FBQUE7QUFBQSxNQUVMLFdBQVcsU0FBUztBQUFBLElBQ3RCO0FBQUEsRUFDRjtBQUNGOyIsCiAgIm5hbWVzIjogW10KfQo=
