apiVersion: v1
kind: Service
metadata:
  name: ue-web-html-vue-boilerplate-dev
  namespace: common
  labels:
    app: ue-web-html-vue-boilerplate
    version: dev
spec:
  ports:
    - name: http
      port: 80
      targetPort: 80
  selector:
    app: ue-web-html-vue-boilerplate
    version: dev
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ue-web-html-vue-boilerplate-dev
  namespace: common
  labels:
    app: ue-web-html-vue-boilerplate
    version: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ue-web-html-vue-boilerplate
      version: dev
  template:
    metadata:
      labels:
        app: ue-web-html-vue-boilerplate
        version: dev
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
    spec:      
      imagePullSecrets:
        - name: docker-registry-auth
      containers:
        - name: ue-web-html-vue-boilerplate
          image: registry.superlucy.net/amiintellect/ue-web-html-vue-boilerplate:latest
          imagePullPolicy: Always
          # 存活探测：kubelet在容器启动 10 秒后进行第一次存活探测。尝试连接 liveness 容器的 8080 端口。 如果存活探测失败，这个容器会被重新启动。
          livenessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 5  ## 5s执行一次
          # 就绪探测：kubelet 在容器启动 10s 后发送第一个就绪探测。判断 nginx 默认页面 index.html 是否存在，尝试连接 liveness 的 80 端口。
          # 如果探测成功，这个 Pod 会被标记为就绪状态，kubelet 将继续每隔 5s 运行一次检测。
          readinessProbe:  
            httpGet:
              path: /index.html
              port: 80
            initialDelaySeconds: 10
            # 每隔 5s 探测一次
            periodSeconds: 5
          resources:
            # 设置资源信息
            limits:
              # 50Mi
              memory: "50Mi"
              # 0.2 CPU
              cpu: "200m"
          ports:
            - name: server
              containerPort: 80
      nodeSelector:
        lang/html: "yes"